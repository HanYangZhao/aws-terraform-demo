# This template is pre-configured to create an applyable run in Terraform Cloud.
# If the plan phase is successful, the run will be applied for the specified workspace.
#
# This workflow is configured to trigger when a push against your `main` branch occurs,
# **IF** the set paths contain files that have changed.
#
---
name: Terraform Cloud Apply Run

on:
  push:
    branches:
    ## RECOMMENDED: Change for your target branch, or include branches you wish to trigger this workflow file.
      - main
    paths:
      - "deploy-vpc/*.tfvars"
      - "deploy-eks/*.tfvars"

## RECOMMENDED: Limit apply runs job / workflow to a single concurrency group at a time.
## link: https://docs.github.com/en/actions/using-jobs/using-concurrency
## Example:
# concurrency: production

## Add shared Environment Variables across jobs here ##
env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }} ## Name of your existing Terraform Cloud Organization. RECOMMENDED: use repository variables. ex. "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}" ## Terraform Cloud API Token. RECOMMENDED: replace with github action secrets. ex. "${{ secrets.TF_API_TOKEN }}"
  ## Additional env variables
  TF_LOG: DEBUG ## Helpful for troubleshooting
  # TF_MAX_TIMEOUT: "30m" ## If you wish to override the default "1h"

jobs:
  terraform-cloud-apply-run-vpc:
    runs-on: ubuntu-latest
    if: contains(toJSON(github.event.commits.*.added), 'deploy-vpc/') ||
        contains(toJSON(github.event.commits.*.modified), 'deploy-vpc/')
    ## OPTIONAL: can scope variables to this specific job
    ## Example:
    # env:
    #  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for VPC changes
        id: check_vpc_changes
        run: |
          echo "Checking for changes in 'deploy-vpc/'"
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- 'deploy-vpc/')
          if [ -n "$CHANGED_FILES" ]; then
            echo "VPC_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Copy terraform.tfvars to components/vpc
        run: |
          cp ./deploy-vpc/terraform.tfvars ./components/vpc/
          ls -la ./components/vpc/

      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
        id: upload
        with:
          workspace: ${{ vars.TF_WORKSPACE_VPC }}
          directory: "./components/vpc"

      - uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: create-run
        with:
          workspace: ${{vars.TF_WORKSPACE_VPC }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}

      - uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.1.1
        id: apply
        if: ${{ fromJSON(steps.create-run.outputs.payload).data.attributes.actions.IsConfirmable }}
        with:
          run: ${{ steps.create-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
