
# This workflow checks which of the 3 env has been modified and calls sub workflow to run the plan on the targeted environment,
# **IF** the set paths contain files that have changed. If the workflow runs, the included steps will upload your terraform configuration, create a new run, and output the plan information to a PR comment.
#
# NOTE: The last step in this template includes a script that will upsert a PR comment. (REQUIRES `Read and write permissions`)
# NOTE: There is a ugly hack to fix the issue where you canâ€™t reference environment variables as inputs for resusable actions. So the inputs are set as outputs of the first job. See https://github.com/orgs/community/discussions/26529
# NOTE: Make sure TF_VAR_AWS_ALLOWED_ACCOUNT_ID_DEV, TF_VAR_AWS_ALLOWED_ACCOUNT_ID_STGN, TF_VAR_AWS_ALLOWED_ACCOUNT_ID_PROD is defined in the github repository env vars
---
name: Terraform Cloud Plan Template

on:
  workflow_call:
    inputs:
      tf_workspace_prefix:
        description: 'The Cloud component (EKS,VPC...)'
        required: true
        type: string
      tf_directory:
        description: 'prefix for the directory of the components'
        required: true
        type: string   
      tf_vars_directory_prefix:
        description: 'prefix for the directory of the tfvars'
        required: true
        type: string   

jobs:
  check_for_changes:
    runs-on: ubuntu-latest
    outputs:
      has_dev_changes: ${{ steps.path_filter.outputs.dev }}
      has_stgn_changes: ${{ steps.path_filter.outputs.stgn }}
      has_prod_changes: ${{ steps.path_filter.outputs.prod }}
    steps:
      - uses: actions/checkout@v3
      - id: path_filter
        uses: dorny/paths-filter@v2
        with:
          list-files: shell
          filters: |
            dev:
              - ${{ inputs.tf_vars_directory_prefix }}/dev/*.tfvars
            stgn:
              - ${{ inputs.tf_vars_directory_prefix }}/stgn/*.tfvars
            prod:
              - ${{ inputs.tf_vars_directory_prefix }}/prod/*.tfvars

  terraform_plan_dev:
    needs: check_for_changes
    if: ${{ needs.check_for_changes.outputs.has_dev_changes == 'true' }}
    uses: ./.github/workflows/terraform-plan-sub-template.yml
    with:
      tf_workspace: ${{ inputs.tf_workspace_prefix }}-dev
      tf_directory: ${{ inputs.tf_directory }}
      tf_vars_directory: ${{ inputs.tf_vars_directory_prefix }}/dev 
      tf_var_aws_allowed_account_id:  ${{ vars.TF_VAR_AWS_ALLOWED_ACCOUNT_ID_DEV }}
    secrets: inherit

  terraform_plan_stgn:
    needs: check_for_changes
    if: ${{ needs.check_for_changes.outputs.has_stgn_changes == 'true' }}
    uses: ./.github/workflows/terraform-plan-sub-template.yml
    with:
      tf_workspace: ${{ inputs.tf_workspace_prefix }}-stgn
      tf_directory: ${{ inputs.tf_directory }}
      tf_vars_directory: ${{ inputs.tf_vars_directory_prefix }}/stgn 
      tf_var_aws_allowed_account_id:  ${{ vars.TF_VAR_AWS_ALLOWED_ACCOUNT_ID_STGN }}
    secrets: inherit

  terraform_plan_prod:
    needs: check_for_changes
    if: ${{ needs.check_for_changes.outputs.has_prod_changes == 'true' }}
    uses: ./.github/workflows/terraform-plan-sub-template.yml
    with:
      tf_workspace: ${{ inputs.tf_workspace_prefix }}-prod
      tf_directory: ${{ inputs.tf_directory }}
      tf_vars_directory: ${{ inputs.tf_vars_directory_prefix }}/prod 
      tf_var_aws_allowed_account_id:  ${{ vars.TF_VAR_AWS_ALLOWED_ACCOUNT_ID_PROD }}
    secrets: inherit